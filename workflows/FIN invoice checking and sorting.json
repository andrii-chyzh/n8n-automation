{
  "name": "FIN invoice checking and sorting DUPLICATES FIX",
  "nodes": [
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "search",
        "query": "={{$json.invoiceName}}",
        "returnAll": true,
        "filters": {
          "path": "/Invoices"
        }
      },
      "type": "n8n-nodes-base.dropbox",
      "typeVersion": 1,
      "position": [
        656,
        56
      ],
      "id": "6586d844-b5a9-476b-804d-90831055947d",
      "name": "Search using FIN number",
      "alwaysOutputData": true,
      "credentials": {
        "dropboxOAuth2Api": {
          "id": "9IO3oj3fGKSNpRrX",
          "name": "Dropbox account Essay Developer OAUTH2"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        208,
        -208
      ],
      "id": "dcd61c57-12a3-4781-87cf-72ac756107ac",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9010e6ce-35ef-4465-821f-ff100a945ae3",
              "name": "accountName",
              "value": "={{ $json.accountName }}",
              "type": "string"
            },
            {
              "id": "f1c2b225-6338-464c-82a7-2445a3fc696d",
              "name": "invoiceName",
              "value": "={{ $json.invoiceName }}",
              "type": "string"
            },
            {
              "id": "cab58da9-e03f-48d4-baa8-9a1e6bb5166a",
              "name": "date",
              "value": "={{ $json.date }}",
              "type": "string"
            },
            {
              "id": "28deab07-3a4e-4cd0-85aa-87b7268eb6af",
              "name": "path",
              "value": "={{ $json.path }}",
              "type": "string"
            },
            {
              "id": "4b65a275-d186-4609-a214-8d2ca65420d8",
              "name": "fullInvoiceName",
              "value": "={{ $json.fullInvoiceName }}",
              "type": "string"
            },
            {
              "id": "98c1c170-3301-411a-9406-f07be7d7a3c6",
              "name": "item",
              "value": "={{ $json.item }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        432,
        -16
      ],
      "id": "3078f616-b23c-4f49-86df-62dbb32c44b2",
      "name": "Save FIN data before search"
    },
    {
      "parameters": {
        "jsCode": "// Отримуємо всі дані\nconst items = $input.all();\n\n// Якщо прийшов порожній результат (1 item без fileName)\nif (items.length === 1 && !items[0].json.name) {\n    // Отримуємо всі FIN інвойси з \"Save FIN data before search\"\n    const allFinInvoices = $('Save FIN data before search').all();\n    \n    // Повертаємо пусті результати для всіх FIN інвойсів\n    return allFinInvoices.map(finInvoice => ({\n        foundInvoice: null,\n        fileName: '',\n        pathDisplay: ''\n    }));\n}\n\n// Якщо є результати пошуку, обробляємо кожен\nconst results = [];\nconst processedFiles = new Set(); // Для дедуплікації\n\nitems.forEach(item => {\n    const fileName = item.json.name || '';\n    const pathDisplay = item.json.path_display || '';\n    \n    // Створюємо унікальний ключ для файлу\n    const fileKey = `${fileName}|${pathDisplay}`;\n    \n    // Пропускаємо якщо файл вже оброблений\n    if (processedFiles.has(fileKey)) {\n        return;\n    }\n    \n    processedFiles.add(fileKey);\n    \n    // Пошук ВСІХ шаблонів FIN-xxxxx або FINORG-xxxxx в назві файлу\n    const matches = fileName.match(/(FIN(?:ORG)?-\\d+)/g);\n    \n    if (matches && matches.length > 0) {\n        // Якщо знайдено кілька інвойсів, створюємо окремий запис для кожного\n        matches.forEach(match => {\n            results.push({\n                foundInvoice: match,\n                fileName: fileName,\n                pathDisplay: pathDisplay\n            });\n        });\n    } else {\n        // Якщо не знайдено жодного інвойсу\n        results.push({\n            foundInvoice: null,\n            fileName: fileName,\n            pathDisplay: pathDisplay\n        });\n    }\n});\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        56
      ],
      "id": "9c0ed423-992d-4883-925d-0ebdce669048",
      "name": "Get FIN invoice name using regexp"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  foundInvoice: $json.foundInvoice,\n  fileName: $json.fileName,\n  pathDisplay: $json.pathDisplay\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1104,
        56
      ],
      "id": "99e0a460-a5b9-4e0a-8a04-0690c6d979a1",
      "name": "Get found FIN Invoice"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "invoiceName",
              "field2": "foundInvoice"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1328,
        -16
      ],
      "id": "3173a45e-7771-4afa-b605-30f8066af862",
      "name": "Merge FIN invoice data"
    },
    {
      "parameters": {
        "jsCode": "// Отримуємо всі FIN інвойси з \"Save FIN data before search\"\nconst allFinInvoices = $('Save FIN data before search').all();\n\n// Отримуємо результати merge\nconst mergeResults = $input.all();\n\n// Створюємо мапу знайдених інвойсів, зберігаючи всі знайдені файли для кожного invoiceName\nconst foundInvoiceMap = {};\nmergeResults.forEach(item => {\n    const finInvoiceName = item.json.foundInvoice; // Це invoiceName зі знайденого файлу\n    if (finInvoiceName) {\n        // Якщо це перший файл для цього invoiceName, створюємо масив\n        if (!foundInvoiceMap[finInvoiceName]) {\n            foundInvoiceMap[finInvoiceName] = [];\n        }\n        \n        // Додаємо файл до масиву\n        foundInvoiceMap[finInvoiceName].push({\n            fileName: item.json.fileName,\n            pathDisplay: item.json.pathDisplay\n        });\n    }\n});\n\n// Обробляємо всі FIN інвойси\nconst results = [];\nallFinInvoices.forEach(finInvoice => {\n    const finInvoiceName = finInvoice.json.invoiceName;\n    const foundFiles = foundInvoiceMap[finInvoiceName]; // Отримуємо масив файлів або undefined\n\n    const isFound = !!foundFiles && foundFiles.length > 0; // Перевіряємо, чи були знайдені дані\n\n    if (isFound && foundFiles.length === 1) {\n        // Якщо знайдено тільки один файл - стандартна поведінка\n        const foundData = foundFiles[0];\n        const outputItem = {\n            ...finInvoice.json, // Копіюємо всі оригінальні властивості з Save FIN data before search\n            status: 'OK',\n            fileName: foundData.fileName,\n            pathDisplay: foundData.pathDisplay\n        };\n        results.push(outputItem);\n    } else if (isFound && foundFiles.length > 1) {\n        // Якщо знайдено кілька файлів - створюємо окремий запис для кожного файлу\n        foundFiles.forEach((foundData, index) => {\n            const outputItem = {\n                ...finInvoice.json, // Копіюємо всі оригінальні властивості з Save FIN data before search\n                status: 'OK',\n                fileName: foundData.fileName,\n                pathDisplay: foundData.pathDisplay\n            };\n            results.push(outputItem);\n        });\n    } else {\n        // Якщо інвойс не знайдено\n        const outputItem = {\n            ...finInvoice.json, // Копіюємо всі оригінальні властивості з Save FIN data before search\n            status: 'NOK',\n            fileName: null,\n            pathDisplay: null\n        };\n        results.push(outputItem);\n    }\n});\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1552,
        -16
      ],
      "id": "6a571bae-aace-4e55-8a32-6ad3f00d6b4c",
      "name": "SET 'OK' : 'NOK' status for FIN invoices"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  date: $json.date,\n  invoiceName: $json.invoiceName,\n  status: $json.status,\n  fullInvoiceName: $json.fullInvoiceName,\n  account: $json.accountName,\n  item: $json.item\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        80
      ],
      "id": "a0c9db84-6449-4f84-9b6e-5d63c864df4d",
      "name": "Delete temp columns from FIN data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9010e6ce-35ef-4465-821f-ff100a945ae3",
              "name": "accountName",
              "value": "={{ $json.accountName }}",
              "type": "string"
            },
            {
              "id": "f1c2b225-6338-464c-82a7-2445a3fc696d",
              "name": "alternativeInvoiceName",
              "value": "={{ $json.alternativeInvoiceName }}",
              "type": "string"
            },
            {
              "id": "cab58da9-e03f-48d4-baa8-9a1e6bb5166a",
              "name": "date",
              "value": "={{ $json.date }}",
              "type": "string"
            },
            {
              "id": "28deab07-3a4e-4cd0-85aa-87b7268eb6af",
              "name": "path",
              "value": "={{ $json.path }}",
              "type": "string"
            },
            {
              "id": "e1a52d55-2848-4ff0-802e-e91ebca8a2b0",
              "name": "fullInvoiceName",
              "value": "={{ $json.fullInvoiceName }}",
              "type": "string"
            },
            {
              "id": "43d0d42f-4e94-4fc7-bd85-0dbca559f17c",
              "name": "item",
              "value": "={{ $json.item }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        432,
        -448
      ],
      "id": "6a108677-277e-4d6e-be39-19c8ef23700e",
      "name": "Save ALT data before search"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "search",
        "query": "={{$json.alternativeInvoiceName}}",
        "returnAll": true,
        "filters": {
          "path": "/Invoices"
        }
      },
      "type": "n8n-nodes-base.dropbox",
      "typeVersion": 1,
      "position": [
        656,
        -280
      ],
      "id": "7fd23784-06f0-45cb-a94a-61be8d556678",
      "name": "Search using ALT number",
      "alwaysOutputData": true,
      "credentials": {
        "dropboxOAuth2Api": {
          "id": "9IO3oj3fGKSNpRrX",
          "name": "Dropbox account Essay Developer OAUTH2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Отримуємо всі дані\nconst items = $input.all();\n\n// Якщо прийшов порожній результат (1 item без fileName)\nif (items.length === 1 && !items[0].json.name) {\n    // Отримуємо всі альтернативні інвойси з \"Save ALT data before search\"\n    const allAltInvoices = $('Save ALT data before search').all();\n    \n    // Повертаємо пусті результати для всіх альтернативних інвойсів\n    return allAltInvoices.map(altInvoice => ({\n        foundInvoice: null,\n        fileName: '',\n        pathDisplay: ''\n    }));\n}\n\n// Якщо є результати пошуку, обробляємо кожен\nconst results = [];\nconst processedFiles = new Set(); // Для дедуплікації\n\nitems.forEach(item => {\n    const fileName = item.json.name || '';\n    const pathDisplay = item.json.path_display || '';\n    \n    // Створюємо унікальний ключ для файлу\n    const fileKey = `${fileName}|${pathDisplay}`;\n    \n    // Пропускаємо якщо файл вже оброблений\n    if (processedFiles.has(fileKey)) {\n        return;\n    }\n    \n    processedFiles.add(fileKey);\n    \n    // Пошук ВСІХ альтернативних форматів: F або P + 3+ цифри\n    const matches = fileName.match(/[FP]\\d{3,}/g);\n    \n    if (matches && matches.length > 0) {\n        // Якщо знайдено кілька інвойсів, створюємо окремий запис для кожного\n        matches.forEach(match => {\n            results.push({\n                foundInvoice: match,\n                fileName: fileName,\n                pathDisplay: pathDisplay\n            });\n        });\n    } else {\n        // Якщо не знайдено жодного інвойсу\n        results.push({\n            foundInvoice: null,\n            fileName: fileName,\n            pathDisplay: pathDisplay\n        });\n    }\n});\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        -280
      ],
      "id": "e687eec8-a400-4b44-9f57-c1dc6141a95c",
      "name": "Get ALT invoice name using regexp"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  foundInvoice: $json.foundInvoice,\n  fileName: $json.fileName,\n  pathDisplay: $json.pathDisplay\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1104,
        -280
      ],
      "id": "a424bc64-ae16-4768-9f67-0a702ab8e55a",
      "name": "Get found ALT Invoice"
    },
    {
      "parameters": {
        "jsCode": "// Отримуємо всі альтернативні інвойси з \"Save ALT data before search\"\nconst allAltInvoices = $('Save ALT data before search').all();\n\n// Отримуємо результати merge\nconst mergeResults = $input.all();\n\n// Створюємо мапу знайдених інвойсів, зберігаючи всі знайдені файли для кожного invoiceName\nconst foundInvoiceMap = {};\nmergeResults.forEach(item => {\n    const altInvoiceName = item.json.foundInvoice; // Це alternativeInvoiceName зі знайденого файлу\n    if (altInvoiceName) {\n        // Якщо це перший файл для цього invoiceName, створюємо масив\n        if (!foundInvoiceMap[altInvoiceName]) {\n            foundInvoiceMap[altInvoiceName] = [];\n        }\n        \n        // Додаємо файл до масиву\n        foundInvoiceMap[altInvoiceName].push({\n            fileName: item.json.fileName,\n            pathDisplay: item.json.pathDisplay\n        });\n    }\n});\n\n// Обробляємо всі альтернативні інвойси\nconst results = [];\nallAltInvoices.forEach(altInvoice => {\n    const altInvoiceName = altInvoice.json.alternativeInvoiceName;\n    const foundFiles = foundInvoiceMap[altInvoiceName]; // Отримуємо масив файлів або undefined\n\n    const isFound = !!foundFiles && foundFiles.length > 0; // Перевіряємо, чи були знайдені дані\n\n    if (isFound && foundFiles.length === 1) {\n        // Якщо знайдено тільки один файл - стандартна поведінка\n        const foundData = foundFiles[0];\n        const outputItem = {\n            ...altInvoice.json, // Копіюємо всі оригінальні властивості з Save ALT data before search\n            status: 'OK',\n            fileName: foundData.fileName,\n            pathDisplay: foundData.pathDisplay\n        };\n        results.push(outputItem);\n    } else if (isFound && foundFiles.length > 1) {\n        // Якщо знайдено кілька файлів - створюємо окремий запис для кожного файлу\n        foundFiles.forEach((foundData, index) => {\n            const outputItem = {\n                ...altInvoice.json, // Копіюємо всі оригінальні властивості з Save ALT data before search\n                status: 'OK',\n                fileName: foundData.fileName,\n                pathDisplay: foundData.pathDisplay\n            };\n            results.push(outputItem);\n        });\n    } else {\n        // Якщо інвойс не знайдено\n        const outputItem = {\n            ...altInvoice.json, // Копіюємо всі оригінальні властивості з Save ALT data before search\n            status: 'NOK',\n            fileName: null,\n            pathDisplay: null\n        };\n        results.push(outputItem);\n    }\n});\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1552,
        -448
      ],
      "id": "c8685438-5136-4d02-b500-0f75b8090289",
      "name": "SET 'OK' : 'NOK' status for ALT invoices"
    },
    {
      "parameters": {
        "jsCode": "const seen = new Set();\nreturn items.filter(item => {\n  const key = item.json.alternativeInvoiceName;\n  if (!key || seen.has(key)) return false;\n  seen.add(key);\n  return true;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        -448
      ],
      "id": "5e82ff15-5743-4269-be7f-db135e69962e",
      "name": "Filter unique ALT invoices"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  date: $json.date,\n  invoiceName: $json.alternativeInvoiceName,\n  status: $json.status,\n  fullInvoiceName: $json.fullInvoiceName,\n  account: $json.accountName,\n  item: $json.item\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        -304
      ],
      "id": "17449a22-07e6-4f92-9587-e8a639352aba",
      "name": "Delete temp columns from ALT data"
    },
    {
      "parameters": {
        "jsCode": "const seen = new Set();\nreturn items.filter(item => {\n  const key = item.json.invoiceName;\n  if (!key || seen.has(key)) return false;\n  seen.add(key);\n  return true;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        -16
      ],
      "id": "8f987066-498a-4be4-9930-75b479007461",
      "name": "Filter unique FIN invoices"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2000,
        -112
      ],
      "id": "9773a14b-0d56-4568-b2c4-d8f0482590b2",
      "name": "Merge FIN and ALT data"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\nimport base64\nfrom io import BytesIO\nimport zipfile\n\nfirst_item = _input.first()\nbinary_data = first_item.binary['data']\n\nif hasattr(binary_data, 'to_py'):\n    py_data = binary_data.to_py()\n    if isinstance(py_data, dict) and 'data' in py_data:\n        data_string = py_data['data']\n        file_data = base64.b64decode(data_string)\n    else:\n        file_data = base64.b64decode(str(py_data))\nelse:\n    file_data = base64.b64decode(binary_data)\n\nxlsx_file = BytesIO(file_data)\nresults = []\n\nwith zipfile.ZipFile(xlsx_file) as zip_file:\n    # 1. Shared Strings\n    shared_strings = []\n    try:\n        with zip_file.open('xl/sharedStrings.xml') as ss_file:\n            ss_content = ss_file.read().decode('utf-8')\n            si_blocks = re.findall(r'<si>(.*?)</si>', ss_content, re.DOTALL)\n            for si in si_blocks:\n                t_texts = re.findall(r'<t[^>]*>(.*?)</t>', si, re.DOTALL)\n                shared_strings.append(''.join(t_texts))\n    except KeyError:\n        pass\n\n    # 2. Visible sheets\n    visible_sheets = []\n    sheet_rels = {}\n    try:\n        with zip_file.open('xl/workbook.xml') as wb_file:\n            wb_content = wb_file.read().decode('utf-8')\n            for match in re.finditer(r'<sheet[^>]+>', wb_content):\n                tag = match.group(0)\n                name = re.search(r'name=\"([^\"]+)\"', tag)\n                rid = re.search(r'r:id=\"([^\"]+)\"', tag)\n                state = re.search(r'state=\"([^\"]+)\"', tag)\n                if name and rid:\n                    is_hidden = state and state.group(1) == \"hidden\"\n                    if not is_hidden:\n                        visible_sheets.append({\n                            \"name\": name.group(1),\n                            \"rid\": rid.group(1)\n                        })\n    except KeyError:\n        pass\n\n    # 3. Sheet relationships\n    try:\n        with zip_file.open('xl/_rels/workbook.xml.rels') as rels_file:\n            rels_content = rels_file.read().decode('utf-8')\n            for match in re.finditer(r'<Relationship[^>]+Id=\"([^\"]+)\"[^>]+Target=\"([^\"]+)\"', rels_content):\n                rid = match.group(1)\n                target = match.group(2)\n                if not target.startswith('xl/'):\n                    target = 'xl/' + target\n                sheet_rels[rid] = target\n    except KeyError:\n        pass\n\n    # 4. Process each visible sheet\n    for sheet in visible_sheets:\n        sheet_name = sheet['name']\n        sheet_file = sheet_rels.get(sheet['rid'])\n        if not sheet_file:\n            continue\n        try:\n            with zip_file.open(sheet_file) as sheet_xml:\n                sheet_content = sheet_xml.read().decode('utf-8')\n                \n                # Find the first data row\n                first_data_row = None\n                for row_match in re.finditer(r'<row r=\"(\\d+)\"[^>]*>(.*?)</row>', sheet_content, re.DOTALL):\n                    row_num = int(row_match.group(1))\n                    row_xml = row_match.group(2)\n                    \n                    has_data = False\n                    for cell_match in re.finditer(r'<c r=\"([A-Z]+)(\\d+)\"(?:[^>]*t=\"([^\"]+)\")?[^>]*>(.*?)</c>', row_xml, re.DOTALL):\n                        col_letter = cell_match.group(1)\n                        cell_type = cell_match.group(3)\n                        cell_inner = cell_match.group(4)\n                        v_match = re.search(r'<v>(.*?)</v>', cell_inner)\n                        if v_match:\n                            v = v_match.group(1)\n                            if cell_type == \"s\" and v.isdigit():\n                                has_data = True\n                                break\n                            elif col_letter in ['B', 'D', 'G', 'M'] and v.strip():\n                                has_data = True\n                                break\n                    \n                    if has_data:\n                        first_data_row = row_num\n                        break\n                \n                if first_data_row is None:\n                    continue\n                \n                # Process all rows starting from first_data_row\n                for row_match in re.finditer(r'<row r=\"(\\d+)\"[^>]*>(.*?)</row>', sheet_content, re.DOTALL):\n                    row_num = int(row_match.group(1))\n                    row_xml = row_match.group(2)\n                    if row_num < first_data_row:\n                        continue\n                    \n                    row_cells = {}\n                    for cell_match in re.finditer(r'<c r=\"([A-Z]+)(\\d+)\"(?:[^>]*t=\"([^\"]+)\")?[^>]*>(.*?)</c>', row_xml, re.DOTALL):\n                        col_letter = cell_match.group(1)\n                        cell_type = cell_match.group(3)\n                        cell_inner = cell_match.group(4)\n                        v_match = re.search(r'<v>(.*?)</v>', cell_inner)\n                        if v_match:\n                            v = v_match.group(1)\n                            if cell_type == \"s\" and v.isdigit():\n                                idx = int(v)\n                                if idx < len(shared_strings):\n                                    value = shared_strings[idx]\n                                else:\n                                    value = f\"INVALID_INDEX_{v}\"\n                            else:\n                                value = v\n                            row_cells[col_letter] = value\n                    \n                    date = row_cells.get('B', '')\n                    invoice = row_cells.get('D', '')\n                    amount = row_cells.get('G', '')\n                    item = row_cells.get('M', '')\n                    \n                    # Filter empty invoices and headers\n                    if not invoice or invoice.strip() == \"\":\n                        continue\n                    \n                    header_values = ['Memo/Description', 'Date', 'Amount', 'Item', 'Account', 'Type', 'Category']\n                    if invoice in header_values or date in header_values or amount in header_values or item in header_values:\n                        continue\n                    \n                    if not (date or invoice or amount or item):\n                        continue\n                    \n                    # Extract invoice name\n                    invoice_name = \"\"\n                    if isinstance(invoice, str):\n                        m = re.search(r'(FIN-?\\d+|FINORG-?\\d+)', invoice)\n                        if m:\n                            invoice_name = m.group(1)\n                        else:\n                            invoice_name = invoice\n                    \n                    # Extract alternative invoice name\n                    alternative_invoice_name = \"\"\n                    if isinstance(invoice, str):\n                        alt_match = re.search(r'([FP]\\d{3,})', invoice)\n                        if alt_match:\n                            alternative_invoice_name = alt_match.group(1)\n                    \n                    # Format date\n                    date_fmt = date\n                    m = re.match(r'(\\d{2})/(\\d{2})/(\\d{4})', date)\n                    if m:\n                        date_fmt = f\"{m.group(1)}.{m.group(3)}\"\n\n                    # Create result item\n                    result_item = {\n                        \"accountName\": sheet_name,\n                        \"invoiceName\": invoice_name,\n                        \"fullInvoiceName\": invoice,\n                        \"date\": date_fmt,\n                        \"amount\": amount,\n                        \"item\": item,\n                        \"path\": f\"/{date_fmt}/{sheet_name}\"\n                    }\n                    \n                    if alternative_invoice_name:\n                        result_item[\"alternativeInvoiceName\"] = alternative_invoice_name\n                    \n                    results.append({\"json\": result_item})\n        except Exception as e:\n            continue\n\nreturn results"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -464,
        -208
      ],
      "id": "53c43355-a9e4-4ff0-83b7-055586defea1",
      "name": "Parse XLSX with Python"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "73e11dd4-4b91-4f66-b58c-08c59bb073ff",
              "leftValue": "={{ $json.alternativeInvoiceName }}",
              "rightValue": false,
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -16,
        -352
      ],
      "id": "f09a6992-456a-42b5-a405-437872ac14e5",
      "name": "Check ALT number is not EMPTY"
    },
    {
      "parameters": {
        "jsCode": "// Фільтруємо записи, виключаючи певні типи Item\nconst excludedItems = [\n    \"Bank charges\",\n    \"Tax salary\", \n    \"Exchange Gain or Loss\",\n    \"Transfer\",\n    \"Sales\",\n    \"Payment of debts to the director\",\n    \"Advance CIT 2024\",\n    \"Tax liability\"\n];\n\n// Фільтруємо вхідні дані\nconst filteredItems = $input.all().filter(item => {\n    const itemValue = item.json.item;\n    \n    // Перевіряємо чи item не входить в список виключень\n    const shouldExclude = excludedItems.some(excludedItem => \n        itemValue === excludedItem\n    );\n    \n    // Повертаємо true тільки якщо item НЕ потрібно виключати\n    return !shouldExclude;\n});\n\nreturn filteredItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        -208
      ],
      "id": "eeafeaed-8e54-4877-ab60-940b88576bf4",
      "name": "Exclude some Item types"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Отримуємо всі дані\nitems = _input.all()\n\n# Групуємо по fullInvoiceName\ngrouped_data = {}\nfor item in items:\n    full_invoice_name = item.json.get('fullInvoiceName', '')\n    if full_invoice_name not in grouped_data:\n        grouped_data[full_invoice_name] = []\n    grouped_data[full_invoice_name].append(item.json)\n\n# Обробляємо кожну групу\nmerged_results = []\nfor full_invoice_name, group_items in grouped_data.items():\n    if len(group_items) == 1:\n        # Якщо тільки один об'єкт, додаємо як є\n        merged_results.append(group_items[0])\n    else:\n        # Якщо кілька об'єктів, об'єднуємо їх\n        merged_item = dict(group_items[0])  # Створюємо копію словника\n        \n        # Об'єднуємо invoiceName\n        invoice_names = []\n        for item in group_items:\n            invoice_name = item.get('invoiceName', '')\n            if invoice_name and invoice_name not in invoice_names:\n                invoice_names.append(invoice_name)\n        merged_item['invoiceName'] = ', '.join(invoice_names)\n        \n        # Об'єднуємо status\n        statuses = [item.get('status', '') for item in group_items]\n        if 'OK' in statuses:\n            merged_item['status'] = 'OK'\n        else:\n            merged_item['status'] = 'NOK'\n        \n        merged_results.append(merged_item)\n\n# Повертаємо результат\nreturn [{\"json\": item} for item in merged_results]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2224,
        -112
      ],
      "id": "d27929a2-5718-4034-9b35-58141046307f",
      "name": "Merge FIN and ALT invoice statuses"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "folder",
        "operation": "list",
        "path": "/Excel_input",
        "limit": 1,
        "filters": {}
      },
      "type": "n8n-nodes-base.dropbox",
      "typeVersion": 1,
      "position": [
        -912,
        -208
      ],
      "id": "e563c566-8d95-4cdf-bb12-1ec2354f17ce",
      "name": "Get excel file name",
      "credentials": {
        "dropboxOAuth2Api": {
          "id": "9IO3oj3fGKSNpRrX",
          "name": "Dropbox account Essay Developer OAUTH2"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "download",
        "path": "=/Excel_input/{{ $json.name }}"
      },
      "type": "n8n-nodes-base.dropbox",
      "typeVersion": 1,
      "position": [
        -688,
        -208
      ],
      "id": "c84ef954-c107-4a6c-8a33-1e1aa75a8cd6",
      "name": "Download a excel file",
      "credentials": {
        "dropboxOAuth2Api": {
          "id": "9IO3oj3fGKSNpRrX",
          "name": "Dropbox account Essay Developer OAUTH2"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1136,
        -208
      ],
      "id": "628e529b-36e9-4b5f-acc1-1147988c7210",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {
          "fileName": "=={{$now.toFormat(\"yyyy-MM-dd_HHmmss\")}}_{{$itemIndex}}.xlsx"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2448,
        -112
      ],
      "id": "929970af-9862-47ca-aa6a-e62eef280e38",
      "name": "Convert data to excel file"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2000,
        -352
      ],
      "id": "5320295a-a79a-4da6-8a2e-a80135e7d075",
      "name": "Merge"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  invoiceName: $json.alternativeInvoiceName,\n  status: $json.status,\n  accountName: $json.accountName,\n  date: $json.date,\n  fileName: $json.fileName,\n  pathDisplay: $json.pathDisplay\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        -592
      ],
      "id": "8a584c0e-2a43-4cb5-90bc-51f4e84226b8",
      "name": "Delete unnecessary ALT invoices data"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  invoiceName: $json.invoiceName,\n  status: $json.status,\n  accountName: $json.accountName,\n  date: $json.date,\n  fileName: $json.fileName,\n  pathDisplay: $json.pathDisplay\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        -112
      ],
      "id": "dfe6a981-ca31-4c9f-9d2b-ed77fa165200",
      "name": "Delete unnecessary FIN invoices data"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2896,
        -496
      ],
      "id": "67a15e19-8d00-4b4e-b8ea-a59e1d5f548c",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "path": "=/Parsing_excel_results/results_{{ $now.toFormat(\"yyyy-MM-dd_HHmmss\") }}.xlsx",
        "binaryData": true
      },
      "type": "n8n-nodes-base.dropbox",
      "typeVersion": 1,
      "position": [
        2672,
        -112
      ],
      "id": "5368a9ad-8fab-45cc-9e4d-d2ead83c6063",
      "name": "Upload excel file with results to dropBox",
      "credentials": {
        "dropboxOAuth2Api": {
          "id": "9IO3oj3fGKSNpRrX",
          "name": "Dropbox account Essay Developer OAUTH2"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "alternativeInvoiceName",
              "field2": "foundInvoice"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1328,
        -448
      ],
      "id": "c83b14da-612e-4721-aa41-43d4ab4b5199",
      "name": "Merge ALT invoice data"
    },
    {
      "parameters": {
        "batchSize": 10,
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2672,
        -352
      ],
      "id": "5101e6f3-ccd9-49fe-8317-dbdf8f3a2fcc",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "sendTo": "andrii.chyzh@boosta.co",
        "subject": "=Automation is complete",
        "emailType": "text",
        "message": "=Automation is complete.\nThe XLSX results are located in the {{ $json.path_display }} file on Dropbox.\n\nLink: https://www.dropbox.com/preview{{ $json.path_display }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2896,
        -112
      ],
      "id": "9bc48bf6-28ce-4f5e-8fa1-139648824184",
      "name": "Send successful automation email",
      "webhookId": "c5e97e5f-7265-46f1-9a8d-a4e4d9e41478",
      "credentials": {
        "gmailOAuth2": {
          "id": "JHrCmpUnBGu2USai",
          "name": "Essay Developer Gmail account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3120,
        -112
      ],
      "id": "c59d6607-d4d6-4ae8-810f-40ae096d8e70",
      "name": "No Operation, do nothing2"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "move",
        "path": "={{ $json.pathDisplay }}",
        "toPath": "=/Sorted_invoices_{{ $now.toFormat(\"yyyy-MM-dd\") }}/{{ $json.date }}/{{ $json.accountName }}/{{ $json.fileName }}"
      },
      "type": "n8n-nodes-base.dropbox",
      "typeVersion": 1,
      "position": [
        2896,
        -304
      ],
      "id": "a1f19a82-284c-4f82-8810-ecac7292510b",
      "name": "Move invoice files to sorted folder",
      "credentials": {
        "dropboxOAuth2Api": {
          "id": "9IO3oj3fGKSNpRrX",
          "name": "Dropbox account Essay Developer OAUTH2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Фільтруємо записи, залишаючи тільки FIN та FINORG інвойси\nconst filteredItems = $input.all().filter(item => {\n    const invoiceName = item.json.invoiceName || '';\n    \n    // Використовуємо regex для пошуку FIN- або FINORG- форматів\n    const finMatch = invoiceName.match(/(FIN-?\\d+|FINORG-?\\d+)/);\n    \n    // Повертаємо true тільки якщо знайдено FIN або FINORG формат\n    return !!finMatch;\n});\n\nreturn filteredItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -16,
        -16
      ],
      "id": "a7bc05fc-789f-45e5-a272-b0871627c4df",
      "name": "Exclude not FIN/FINORG invoice names"
    },
    {
      "parameters": {
        "jsCode": "// Фільтруємо записи, залишаючи тільки зі статусом \"OK\"\nconst filteredItems = $input.all().filter(item => {\n    return item.json.status === \"OK\";\n});\n\nreturn filteredItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2224,
        -352
      ],
      "id": "0c0cf03d-6081-405e-88d4-edb36c51bb42",
      "name": "Filter only found invoices"
    },
    {
      "parameters": {
        "jsCode": "// Отримуємо всі записи зі статусом \"OK\"\nconst items = $input.all();\n\n// Створюємо Map для зберігання унікальних файлів\n// Ключ - fileName, значення - перший знайдений запис\nconst uniqueFiles = new Map();\n\nitems.forEach(item => {\n    const fileName = item.json.fileName;\n    \n    // Якщо файл ще не доданий, додаємо його\n    if (fileName && !uniqueFiles.has(fileName)) {\n        uniqueFiles.set(fileName, {\n            accountName: item.json.accountName,\n            date: item.json.date,\n            fileName: fileName,\n            pathDisplay: item.json.pathDisplay\n        });\n    }\n});\n\n// Повертаємо тільки унікальні файли\nreturn Array.from(uniqueFiles.values());"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2448,
        -352
      ],
      "id": "d89063bf-8ae1-41c7-b2e9-c23a5bab9d05",
      "name": "Exclude duplicates file path"
    }
  ],
  "pinData": {},
  "connections": {
    "Search using FIN number": {
      "main": [
        [
          {
            "node": "Get FIN invoice name using regexp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save FIN data before search": {
      "main": [
        [
          {
            "node": "Search using FIN number",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge FIN invoice data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get FIN invoice name using regexp": {
      "main": [
        [
          {
            "node": "Get found FIN Invoice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get found FIN Invoice": {
      "main": [
        [
          {
            "node": "Merge FIN invoice data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge FIN invoice data": {
      "main": [
        [
          {
            "node": "SET 'OK' : 'NOK' status for FIN invoices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SET 'OK' : 'NOK' status for FIN invoices": {
      "main": [
        [
          {
            "node": "Delete temp columns from FIN data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete unnecessary FIN invoices data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search using ALT number": {
      "main": [
        [
          {
            "node": "Get ALT invoice name using regexp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save ALT data before search": {
      "main": [
        [
          {
            "node": "Search using ALT number",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge ALT invoice data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get ALT invoice name using regexp": {
      "main": [
        [
          {
            "node": "Get found ALT Invoice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get found ALT Invoice": {
      "main": [
        [
          {
            "node": "Merge ALT invoice data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Filter unique ALT invoices": {
      "main": [
        [
          {
            "node": "Save ALT data before search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SET 'OK' : 'NOK' status for ALT invoices": {
      "main": [
        [
          {
            "node": "Delete temp columns from ALT data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete unnecessary ALT invoices data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter unique FIN invoices": {
      "main": [
        [
          {
            "node": "Save FIN data before search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete temp columns from FIN data": {
      "main": [
        [
          {
            "node": "Merge FIN and ALT data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Delete temp columns from ALT data": {
      "main": [
        [
          {
            "node": "Merge FIN and ALT data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge FIN and ALT data": {
      "main": [
        [
          {
            "node": "Merge FIN and ALT invoice statuses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse XLSX with Python": {
      "main": [
        [
          {
            "node": "Exclude some Item types",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check ALT number is not EMPTY": {
      "main": [
        [
          {
            "node": "Filter unique ALT invoices",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Exclude some Item types": {
      "main": [
        [
          {
            "node": "Check ALT number is not EMPTY",
            "type": "main",
            "index": 0
          },
          {
            "node": "Exclude not FIN/FINORG invoice names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge FIN and ALT invoice statuses": {
      "main": [
        [
          {
            "node": "Convert data to excel file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get excel file name": {
      "main": [
        [
          {
            "node": "Download a excel file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download a excel file": {
      "main": [
        [
          {
            "node": "Parse XLSX with Python",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get excel file name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert data to excel file": {
      "main": [
        [
          {
            "node": "Upload excel file with results to dropBox",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Filter only found invoices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete unnecessary ALT invoices data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete unnecessary FIN invoices data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Upload excel file with results to dropBox": {
      "main": [
        [
          {
            "node": "Send successful automation email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge ALT invoice data": {
      "main": [
        [
          {
            "node": "SET 'OK' : 'NOK' status for ALT invoices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing1": {
      "main": [
        []
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Move invoice files to sorted folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move invoice files to sorted folder": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Exclude not FIN/FINORG invoice names": {
      "main": [
        [
          {
            "node": "Filter unique FIN invoices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing2": {
      "main": [
        []
      ]
    },
    "Filter only found invoices": {
      "main": [
        [
          {
            "node": "Exclude duplicates file path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Exclude duplicates file path": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send successful automation email": {
      "main": [
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "21c6a881-86af-4afb-b1df-df0f3189b02d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e64ee2d090754eaf8bf7cc58dc89877463b45bd834395c2f18561dcd126634fe"
  },
  "id": "hZBXpIquR1ivtVqe",
  "tags": []
}